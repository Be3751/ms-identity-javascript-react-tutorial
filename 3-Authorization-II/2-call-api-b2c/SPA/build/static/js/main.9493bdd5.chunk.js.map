{"version":3,"sources":["authConfig.js","components/NavigationBar.jsx","components/PageLayout.jsx","fetch.js","components/DataDisplay.jsx","pages/Hello.jsx","App.jsx","index.js"],"names":["b2cPolicies","signUpSignIn","forgotPassword","editProfile","authority","msalConfig","auth","clientId","knownAuthorities","redirectUri","postLogoutRedirectUri","navigateToLoginRequestUrl","cache","cacheLocation","storeAuthStateInCookie","system","loggerOptions","loggerCallback","level","message","containsPii","LogLevel","Error","console","error","Info","info","Verbose","debug","Warning","warn","protectedResources","apiHello","endpoint","scopes","loginRequest","NavigationBar","instance","useMsal","Navbar","bg","variant","className","href","Nav","Link","as","Button","onClick","loginPopup","DropdownButton","drop","title","Dropdown","Item","logoutPopup","mainWindowRedirectUri","logoutRedirect","catch","log","loginRedirect","PageLayout","props","children","target","callApiWithToken","accessToken","apiEndpoint","headers","Headers","bearer","append","options","method","fetch","then","response","json","HelloData","tableRows","Object","entries","helloData","map","entry","index","HelloContent","accounts","inProgress","account","useAccount","useState","setHelloData","useEffect","acquireTokenSilent","InteractionRequiredAuthError","acquireTokenPopup","Hello","authRequest","interactionType","InteractionType","Redirect","authenticationRequest","Pages","callbackId","addEventCallback","event","eventType","EventType","LOGIN_FAILURE","errorMessage","indexOf","Popup","e","LOGIN_SUCCESS","ACQUIRE_TOKEN_SUCCESS","payload","idTokenClaims","window","alert","logout","removeEventCallback","path","App","msalInstance","PublicClientApplication","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9493bdd5.chunk.js","sourcesContent":["/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport { LogLevel } from \"@azure/msal-browser\";\r\n\r\n/**\r\n * Enter here the user flows and custom policies for your B2C application\r\n * To learn more about user flows, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/user-flow-overview\r\n * To learn more about custom policies, visit: https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-policy-overview\r\n */\r\nexport const b2cPolicies = {\r\n    names: {\r\n        signUpSignIn: \"B2C_1_signup-signin-jscom\",\r\n        forgotPassword: \"B2C_1_reset-pw-jscom\",\r\n        editProfile: \"B2C_1_edit_jscom\"\r\n    },\r\n    authorities: {\r\n        signUpSignIn: {\r\n            authority: \"https://jcsampleb2c.b2clogin.com/jcsampleb2c.onmicrosoft.com/B2C_1_signup-signin-jscom\",\r\n        },\r\n        forgotPassword: {\r\n            authority: \"https://jcsampleb2c.b2clogin.com/jcsampleb2c.onmicrosoft.com/B2C_1_reset-pw-jscom\",\r\n        },\r\n        editProfile: {\r\n            authority: \"https://jcsampleb2c.b2clogin.com/jcsampleb2c.onmicrosoft.com/B2C_1_edit_jscom\"\r\n        }\r\n    },\r\n    authorityDomain: \"jcsampleb2c.b2clogin.com\"\r\n}\r\n\r\n\r\n/**\r\n * Configuration object to be passed to MSAL instance on creation. \r\n * For a full list of MSAL.js configuration parameters, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/configuration.md \r\n */\r\nexport const msalConfig = {\r\n    auth: {\r\n        clientId: \"e5d35d60-cf12-4781-8d55-b3ff3c73a802\", // This is the ONLY mandatory field that you need to supply.\r\n        authority: b2cPolicies.authorities.signUpSignIn.authority, // Choose SUSI as your default authority.\r\n        knownAuthorities: [b2cPolicies.authorityDomain], // Mark your B2C tenant's domain as trusted.\r\n        redirectUri: \"/\", // You must register this URI on Azure Portal/App Registration. Defaults to window.location.origin\r\n        postLogoutRedirectUri: \"/\", // Indicates the page to navigate after logout.\r\n        navigateToLoginRequestUrl: false, // If \"true\", will navigate back to the original request location before processing the auth code response.\r\n    },\r\n    cache: {\r\n        cacheLocation: \"sessionStorage\", // Configures cache location. \"sessionStorage\" is more secure, but \"localStorage\" gives you SSO between tabs.\r\n        storeAuthStateInCookie: false, // Set this to \"true\" if you are having issues on IE11 or Edge\r\n    },\r\n    system: {\r\n        loggerOptions: {\r\n            loggerCallback: (level, message, containsPii) => {\r\n                if (containsPii) {\r\n                    return;\r\n                }\r\n                switch (level) {\r\n                    case LogLevel.Error:\r\n                        console.error(message);\r\n                        return;\r\n                    case LogLevel.Info:\r\n                        console.info(message);\r\n                        return;\r\n                    case LogLevel.Verbose:\r\n                        console.debug(message);\r\n                        return;\r\n                    case LogLevel.Warning:\r\n                        console.warn(message);\r\n                        return;\r\n                }\r\n            }\r\n        }\r\n    }\r\n};\r\n\r\n/**\r\n * Add here the endpoints and scopes when obtaining an access token for protected web APIs. For more information, see:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/resources-and-scopes.md\r\n */\r\nexport const protectedResources = {\r\n    apiHello: {\r\n        endpoint: \"http://localhost:5000/hello\",\r\n        scopes: [\"https://jcsampleb2c.onmicrosoft.com/tasks-api/tasks.read\", \"https://jcsampleb2c.onmicrosoft.com/tasks-api/tasks.write\"], // e.g. api://xxxxxx/access_as_user\r\n    },\r\n}\r\n\r\n/**\r\n * Scopes you add here will be prompted for user consent during sign-in.\r\n * By default, MSAL.js will add OIDC scopes (openid, profile, email) to any login request.\r\n * For more information about OIDC scopes, visit: \r\n * https://docs.microsoft.com/en-us/azure/active-directory/develop/v2-permissions-and-consent#openid-connect-scopes\r\n */\r\n export const loginRequest = {\r\n    scopes: [...protectedResources.apiHello.scopes]\r\n};\r\n","import { AuthenticatedTemplate, UnauthenticatedTemplate, useMsal } from \"@azure/msal-react\";\r\n\r\nimport { Nav, Navbar, Button, Dropdown, DropdownButton} from \"react-bootstrap\";\r\n\r\nimport { loginRequest, b2cPolicies } from \"../authConfig\";\r\n\r\nexport const NavigationBar = () => {\r\n\r\n    const { instance } = useMsal();\r\n\r\n    const handleLogin = () => {\r\n        instance.loginPopup(loginRequest)\r\n            .catch((error) => console.log(error))\r\n    }\r\n    /**\r\n     * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n     * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n     * only render their children if a user is authenticated or unauthenticated, respectively.\r\n     */\r\n    return (\r\n        <>\r\n            <Navbar bg=\"primary\" variant=\"dark\">\r\n                <a className=\"navbar-brand\" href=\"/\">Microsoft identity platform</a>\r\n                <AuthenticatedTemplate>\r\n                    <Nav.Link as={Button} href=\"/hello\">HelloAPI</Nav.Link>\r\n                    <div className=\"ml-auto\">\r\n                        <Button variant=\"info\" onClick={() => instance.loginPopup(b2cPolicies.authorities.editProfile)} className=\"ml-auto\">Edit Profile</Button>\r\n                        <DropdownButton variant=\"warning\" className=\"ml-auto\" drop=\"left\" title=\"Sign Out\">\r\n                            <Dropdown.Item as=\"button\" onClick={() => instance.logoutPopup({ postLogoutRedirectUri: \"/\", mainWindowRedirectUri: \"/\" })}>Sign out using Popup</Dropdown.Item>\r\n                            <Dropdown.Item as=\"button\" onClick={() => instance.logoutRedirect({ postLogoutRedirectUri: \"/\" })}>Sign out using Redirect</Dropdown.Item>\r\n                        </DropdownButton>\r\n                    </div>\r\n                </AuthenticatedTemplate>\r\n                <UnauthenticatedTemplate>\r\n                    <DropdownButton variant=\"secondary\" className=\"ml-auto\" drop=\"left\" title=\"Sign In\">\r\n                        <Dropdown.Item as=\"button\" onClick={handleLogin}>Sign in using Popup</Dropdown.Item>\r\n                        <Dropdown.Item as=\"button\" onClick={() => instance.loginRedirect(loginRequest)}>Sign in using Redirect</Dropdown.Item>\r\n                    </DropdownButton>\r\n                </UnauthenticatedTemplate>\r\n            </Navbar>\r\n        </>\r\n    );\r\n};","import { AuthenticatedTemplate } from \"@azure/msal-react\";\r\n\r\nimport { NavigationBar } from \"./NavigationBar\";\r\n\r\nexport const PageLayout = (props) => {\r\n    \r\n    /**\r\n     * Most applications will need to conditionally render certain components based on whether a user is signed in or not. \r\n     * msal-react provides 2 easy ways to do this. AuthenticatedTemplate and UnauthenticatedTemplate components will \r\n     * only render their children if a user is authenticated or unauthenticated, respectively.\r\n     */\r\n    return (\r\n        <>\r\n            <NavigationBar />\r\n            <br />\r\n            <h5><center>Welcome to the Microsoft Authentication Library For React Tutorial</center></h5>\r\n            <br />\r\n            {props.children}\r\n            <br />\r\n            <AuthenticatedTemplate>\r\n                <footer>\r\n                    <center>How did we do? \r\n                        <a href=\"https://forms.office.com/Pages/ResponsePage.aspx?id=v4j5cvGGr0GRqy180BHbR73pcsbpbxNJuZCMKN0lURpUMlRHSkc5U1NLUkxFNEtVN0dEOTFNQkdTWiQlQCN0PWcu\" target=\"_blank\"> Share your experience!</a>\r\n                    </center>\r\n                </footer>\r\n            </AuthenticatedTemplate>\r\n        </>\r\n    );\r\n};","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nexport const callApiWithToken = async(accessToken, apiEndpoint) => {\r\n    const headers = new Headers();\r\n    const bearer = `Bearer ${accessToken}`;\r\n\r\n    headers.append(\"Authorization\", bearer);\r\n\r\n    const options = {\r\n        method: \"GET\",\r\n        headers: headers\r\n    };\r\n\r\n    return fetch(apiEndpoint, options)\r\n        .then(response => response.json())\r\n        .catch(error => console.log(error));\r\n}","import \"../styles/App.css\";\r\nimport { protectedResources } from \"../authConfig\";\r\n\r\nexport const HelloData = (props) => {\r\n    const tableRows = Object.entries(props.helloData).map((entry, index) => {\r\n        return (<tr key={index}>\r\n            <td><b>{entry[0]}: </b></td>\r\n            <td>{entry[1]}</td>\r\n        </tr>)\r\n    });\r\n\r\n    return (\r\n        <>\r\n        <div className=\"data-area-div\">\r\n            <p>Calling <strong>custom protected web API</strong>...</p>\r\n            <ul>\r\n                <li><strong>endpoint:</strong> <mark>{protectedResources.apiHello.endpoint}</mark></li>\r\n                <li><strong>scope:</strong> <mark>{protectedResources.apiHello.scopes[0]}</mark></li>\r\n            </ul>\r\n            <p>Contents of the <strong>response</strong> is below:</p>\r\n        </div>\r\n        <div className=\"data-area-div\">\r\n            <table>\r\n                <thead>\r\n                </thead>\r\n                <tbody>\r\n                    {tableRows}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        </>\r\n    );\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nimport { MsalAuthenticationTemplate, useMsal, useAccount } from \"@azure/msal-react\";\r\nimport { InteractionRequiredAuthError, InteractionType } from \"@azure/msal-browser\";\r\n\r\nimport { loginRequest, protectedResources } from \"../authConfig\";\r\nimport { callApiWithToken } from \"../fetch\";\r\nimport { HelloData } from \"../components/DataDisplay\";\r\n\r\nconst HelloContent = () => {\r\n    /**\r\n     * useMsal is hook that returns the PublicClientApplication instance, \r\n     * an array of all accounts currently signed in and an inProgress value \r\n     * that tells you what msal is currently doing. For more, visit: \r\n     * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n     */\r\n    const { instance, accounts, inProgress } = useMsal();\r\n    const account = useAccount(accounts[0] || {});\r\n    const [helloData, setHelloData] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (account && inProgress === \"none\" && !helloData) {\r\n            instance.acquireTokenSilent({\r\n                scopes: protectedResources.apiHello.scopes,\r\n                account: account\r\n            }).then((response) => {\r\n                callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\r\n                    .then(response => setHelloData(response));\r\n            }).catch((error) => {\r\n                // in case if silent token acquisition fails, fallback to an interactive method\r\n                if (error instanceof InteractionRequiredAuthError) {\r\n                    if (account && inProgress === \"none\") {\r\n                        instance.acquireTokenPopup({\r\n                            scopes: protectedResources.apiHello.scopes,\r\n                        }).then((response) => {\r\n                            callApiWithToken(response.accessToken, protectedResources.apiHello.endpoint)\r\n                                .then(response => setHelloData(response));\r\n                        }).catch(error => console.log(error));\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }, [account, inProgress, instance]);\r\n  \r\n    return (\r\n        <>\r\n            { helloData ? <HelloData helloData={helloData} /> : null }\r\n        </>\r\n    );\r\n};\r\n\r\n/**\r\n * The `MsalAuthenticationTemplate` component will render its children if a user is authenticated \r\n * or attempt to sign a user in. Just provide it with the interaction type you would like to use \r\n * (redirect or popup) and optionally a [request object](https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-browser/docs/request-response-object.md)\r\n * to be passed to the login API, a component to display while authentication is in progress or a component to display if an error occurs. For more, visit:\r\n * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nexport const Hello = () => {\r\n    const authRequest = {\r\n        ...loginRequest\r\n    };\r\n\r\n    return (\r\n        <MsalAuthenticationTemplate \r\n            interactionType={InteractionType.Redirect} \r\n            authenticationRequest={authRequest}\r\n        >\r\n            <HelloContent />\r\n        </MsalAuthenticationTemplate>\r\n      )\r\n};","/*\r\n * Copyright (c) Microsoft Corporation. All rights reserved.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\n\r\nimport { MsalProvider, useMsal } from \"@azure/msal-react\";\r\nimport { EventType, InteractionType } from \"@azure/msal-browser\";\r\n\r\nimport { b2cPolicies } from \"./authConfig\";\r\nimport { PageLayout } from \"./components/PageLayout\";\r\nimport { Hello } from \"./pages/Hello\";\r\n\r\nimport \"./styles/App.css\";\r\n\r\nconst Pages = () => {\r\n\r\n  /**\r\n   * useMsal is hook that returns the PublicClientApplication instance, \r\n   * an array of all accounts currently signed in and an inProgress value \r\n   * that tells you what msal is currently doing. For more, visit:\r\n   * https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/hooks.md\r\n   */\r\n  const { instance } = useMsal();\r\n\r\n  /**\r\n   * Using the event API, you can register an event callback that will do something when an event is emitted. \r\n   * When registering an event callback in a react component you will need to make sure you do 2 things.\r\n   * 1) The callback is registered only once\r\n   * 2) The callback is unregistered before the component unmounts.\r\n   * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/events.md\r\n   */\r\n  useEffect(() => {\r\n    const callbackId = instance.addEventCallback((event) => {\r\n      if (event.eventType === EventType.LOGIN_FAILURE) {\r\n        if (event.error && event.error.errorMessage.indexOf(\"AADB2C90118\") > -1) {\r\n          if (event.interactionType === InteractionType.Redirect) {\r\n            instance.loginRedirect(b2cPolicies.authorities.forgotPassword);\r\n          } else if (event.interactionType === InteractionType.Popup) {\r\n            instance.loginPopup(b2cPolicies.authorities.forgotPassword)\r\n              .catch(e => {\r\n                return;\r\n              });\r\n          }\r\n        }\r\n      }\r\n\r\n      if (event.eventType === EventType.LOGIN_SUCCESS || event.eventType === EventType.ACQUIRE_TOKEN_SUCCESS) {\r\n        if (event?.payload) {\r\n          /**\r\n           * We need to reject id tokens that were not issued with the default sign-in policy.\r\n           * \"acr\" claim in the token tells us what policy is used (NOTE: for new policies (v2.0), use \"tfp\" instead of \"acr\").\r\n           * To learn more about B2C tokens, visit https://docs.microsoft.com/en-us/azure/active-directory-b2c/tokens-overview\r\n           */\r\n          if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.forgotPassword) {\r\n            window.alert(\"Password has been reset successfully. \\nPlease sign-in with your new password.\");\r\n            return instance.logout();\r\n          } else if (event.payload.idTokenClaims[\"acr\"] === b2cPolicies.names.editProfile) {\r\n            window.alert(\"Profile has been edited successfully. \\nPlease sign-in again.\");\r\n            return instance.logout();\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    return () => {\r\n      if (callbackId) {\r\n        instance.removeEventCallback(callbackId);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Switch>\r\n      <Route path=\"/hello\">\r\n        <Hello />\r\n      </Route>\r\n    </Switch>\r\n  )\r\n}\r\n\r\nconst App = ({ instance }) => {\r\n  return (\r\n    <Router>\r\n      <MsalProvider instance={instance}>\r\n        <PageLayout>\r\n          <Pages />\r\n        </PageLayout>\r\n      </MsalProvider>\r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport { PublicClientApplication } from \"@azure/msal-browser\";\r\nimport { msalConfig } from \"./authConfig\";\r\n\r\nimport App from \"./App.jsx\";\r\n\r\nimport \"bootstrap/dist/css/bootstrap.min.css\";\r\nimport \"./styles/index.css\";\r\n\r\n/**\r\n * MSAL should be instantiated outside of the component tree to prevent it from being re-instantiated on re-renders. \r\n * For more, visit: https://github.com/AzureAD/microsoft-authentication-library-for-js/blob/dev/lib/msal-react/docs/getting-started.md\r\n */\r\nconst msalInstance = new PublicClientApplication(msalConfig);\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App instance={msalInstance} />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}